@page "/"
@inject HttpClient Http

<PageTitle>Leaderboard</PageTitle>

<h1><span>Sentaur Survivors • Scores</span></h1>

<p class="notice"><span>Win a Steam Deck!</span> Winner will be
    announced at the Sentry
    Booth at 1PM PT on <span>Friday,
        March 22,
        2024</span>.</p>

@if (scores == null)
{
    <p>
    <em>Loading...</em>
</p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Score</th>
            <th>Time</th>
            <th>Recorded</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var score in scores)
            {
                <tr>
                    <td>@score.Name</td>
                    <td>@score.Score</td>
                    <td>@score.Duration.ToString(@"mm\:ss")</td>
                    <td>@TimeZoneInfo.ConvertTimeFromUtc(score.Timestamp.DateTime, TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time")).ToString("dddd, h:mm tt")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ScoreEntry[]? scores;

    protected override async Task OnInitializedAsync()
    {
        // TODO: URL needs to come from config
        scores = await Http.GetFromJsonAsync<ScoreEntry[]>("http://localhost:5203/score");
    }

    ISpan? _pageLoad;
    protected override void OnInitialized()
    {
        SentrySdk.ConfigureScope(s => _pageLoad = s.Transaction = SentrySdk.StartTransaction("Score", "page.load"));
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        _pageLoad?.Finish();
        _pageLoad = null;
    }

}
